复刻 Claude 的多智能体协作架构（Lead Agent + Subagents），让多个 LLM Agent 分工合作自动审核医疗保险理赔申请（claim）。
先完成最核心的功能mvp，不要太复杂
🧠 项目结构概览
bash
Copy
Edit
llm-claim-auditor/
├── agents/                   # 各类智能体定义
│   ├── lead_agent.py
│   ├── claim_extractor.py
│   ├── policy_checker.py
│   └── decision_maker.py
├── data/                     # 输入数据（医疗说明书、保险条款、假设理赔表）
├── tools/                    # Agent 可调用工具（搜索、匹配、检索）
├── memory/                   # Agent 历史对话/缓存
├── scripts/                  # 主运行逻辑
│   └── run_agents.py
├── README.md
└── requirements.txt
🛠️ 用 Cursor 步步执行（适配你工作流）
🥇 Step 1：新建项目文件夹
打开 Cursor：

左上角 → New Folder → 命名为 llm-claim-auditor

新建子文件夹：agents/, data/, scripts/, tools/

🧩 Step 2：安装依赖（Cursor Terminal）
在 requirements.txt 输入：

txt
Copy
Edit
openai
langchain
langchain-openai
python-dotenv
tiktoken
然后在 Cursor Terminal 中运行：

bash
Copy
Edit
pip install -r requirements.txt
👨‍👩‍👧 Step 3：定义各类 Agent
agents/lead_agent.py
python
Copy
Edit
# 负责调度任务、调用子 agent、整合结果
class LeadAgent:
    def __init__(self):
        from agents.claim_extractor import ClaimExtractor
        from agents.policy_checker import PolicyChecker
        from agents.decision_maker import DecisionMaker
        self.extractor = ClaimExtractor()
        self.checker = PolicyChecker()
        self.decider = DecisionMaker()

    def run(self, input_text):
        claim_info = self.extractor.extract(input_text)
        policy_findings = self.checker.check(claim_info)
        final_decision = self.decider.decide(claim_info, policy_findings)
        return final_decision
💡 在 Cursor 中输入注释如 # TODO: 请用 LangChain 实现每个子 Agent 的调用，Cursor 会补代码

🧠 Step 4：子 Agent 示例
agents/claim_extractor.py
python
Copy
Edit
class ClaimExtractor:
    def extract(self, text):
        # 模拟抽取信息：姓名、病情、治疗过程
        # 后续可接入 GPT 实体提取或 RAG 系统
        return {
            "patient": "John Doe",
            "procedure": "Knee Replacement",
            "diagnosis": "Osteoarthritis"
        }
你可以在 Cursor 用 /refactor、/expand 让它增强逻辑或加入 langchain 工具调用。

🧪 Step 5：主运行脚本
scripts/run_agents.py
python
Copy
Edit
from agents.lead_agent import LeadAgent

if __name__ == "__main__":
    input_text = "Patient John Doe underwent a knee replacement for osteoarthritis..."
    lead = LeadAgent()
    decision = lead.run(input_text)
    print("Final Decision:", decision)